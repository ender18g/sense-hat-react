{"version":3,"sources":["ColorModeSwitcher.js","spaceShip.svg","Rotation.js","Chart.js","Graph.js","raspi.webp","Home.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Rotation","useState","roll","pitch","yaw","response","setResponse","useEffect","socket","socketIOClient","on","data","orientation","disconnect","my","textAlign","letterSpacing","justifyContent","Object","keys","map","item","i","mx","toFixed","style","transform","height","src","spaceShip","Chart","plotKey","toUpperCase","length","slice","LineChart","width","YAxis","type","unit","Label","value","position","angle","XAxis","dataKey","Tooltip","CartesianGrid","stroke","Line","strokeWidth","yAxisId","log","setLog","show","setShow","toggleData","event","target","name","k","Home","m","raspi","App","theme","bg","alignItems","fontWeight","to","exact","path","component","Graph","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c32efca.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/spaceShip.ba63d907.svg\";","import React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { Flex, Text, Box, Heading, Image } from '@chakra-ui/react';\nimport spaceShip from './spaceShip.svg';\n\nconst ENDPOINT = 'http://localhost:5000';\n\nconst Rotation = () => {\n\tconst [ response, setResponse ] = useState({ roll: 0, pitch: 0, yaw: 0 });\n\n\tuseEffect(() => {\n\t\tconst socket = socketIOClient(ENDPOINT);\n\t\tsocket.on('imu', (data) => {\n\t\t\tsetResponse(data.data.orientation);\n\t\t});\n\n\t\treturn () => socket.disconnect();\n\t}, []);\n\n\treturn (\n\t\t<Box>\n\t\t\t<Heading my=\"5\" textAlign=\"center\" letterSpacing=\".1em\">\n\t\t\t\tIMU Demo\n\t\t\t</Heading>\n\t\t\t<Flex my=\"5\" justifyContent=\"center\">\n\t\t\t\t<Flex justifyContent=\"space-between\">\n\t\t\t\t\t{Object.keys(response).map((item, i) => (\n\t\t\t\t\t\t<Text mx=\"2\" key={i}>\n\t\t\t\t\t\t\t{item}: {response[item].toFixed(1)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t))}\n\t\t\t\t</Flex>\n\t\t\t</Flex>\n\t\t\t<Flex\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: `rotate(${response.pitch.toFixed(2)}deg)`\n\t\t\t\t}}\n\t\t\t\tjustifyContent=\"center\"\n\t\t\t\theight=\"50vh\"\n\t\t\t>\n\t\t\t\t<Image src={spaceShip} />\n\t\t\t</Flex>\n\t\t</Box>\n\t);\n};\n\nexport default Rotation;\n","import React from 'react';\nimport {\n\tResponsiveContainer,\n\tLineChart,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tReferenceLine,\n\tReferenceArea,\n\tReferenceDot,\n\tTooltip,\n\tCartesianGrid,\n\tLegend,\n\tBrush,\n\tErrorBar,\n\tAreaChart,\n\tArea,\n\tLabel,\n\tLabelList\n} from 'recharts';\n\nimport { Flex, Text, Box, Heading, Image } from '@chakra-ui/react';\n\nexport default function Chart(props) {\n\tconst { data, plotKey } = props;\n\treturn (\n\t\t<Box>\n\t\t\t<Flex justifyContent=\"center\">\n\t\t\t\t<Heading color=\"blue.700\" mx=\"2\" size=\"md\">\n\t\t\t\t\t{plotKey.toUpperCase()}:\n\t\t\t\t</Heading>\n\t\t\t\t<Heading mx=\"3\" size=\"md\" color=\"gray\">\n\t\t\t\t\t{data.length > 10 && data.slice(-1)[0][plotKey].toFixed(1)}\n\t\t\t\t</Heading>\n\t\t\t</Flex>\n\t\t\t<Flex justifyContent=\"center\">\n\t\t\t\t<LineChart width={700} height={400} data={props.data}>\n\t\t\t\t\t<YAxis type=\"number\" unit=\"\" width={80}>\n\t\t\t\t\t\t<Label value=\"Degrees\" position=\"insideLeft\" angle={90} />\n\t\t\t\t\t</YAxis>\n\t\t\t\t\t<XAxis dataKey=\"name\">\n\t\t\t\t\t\t<Label value=\"Time\" angle={0} />\n\t\t\t\t\t</XAxis>\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<CartesianGrid stroke=\"#f5f5f5\" />\n\t\t\t\t\t<Line type=\"monotone\" dataKey={props.plotKey} stroke=\"#ffb14a\" strokeWidth={3} yAxisId={0} />\n\t\t\t\t</LineChart>\n\t\t\t</Flex>\n\t\t</Box>\n\t);\n}\n","import React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { Flex, Text, Box, Heading, Image, Button } from '@chakra-ui/react';\n\nimport Chart from './Chart';\n\nconst ENDPOINT = 'http://localhost:5000';\n\nconst Rotation = () => {\n\tconst [ response, setResponse ] = useState({ roll: 0, pitch: 0, yaw: 0 });\n\tconst [ log, setLog ] = useState([]);\n\tconst [ show, setShow ] = useState('roll');\n\n\tuseEffect(() => {\n\t\tconst socket = socketIOClient(ENDPOINT);\n\t\tsocket.on('imu', (data) => {\n\t\t\tsetResponse(data.data.orientation);\n\t\t});\n\n\t\treturn () => socket.disconnect();\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetLog([ ...log.slice(-50), response ]);\n\t\t},\n\t\t[ response ]\n\t);\n\n\tconst toggleData = (event) => {\n\t\tsetShow(event.target.name);\n\t};\n\n\treturn (\n\t\t<Box>\n\t\t\t<Heading my=\"5\" textAlign=\"center\" letterSpacing=\".1em\">\n\t\t\t\tIMU Charts\n\t\t\t</Heading>\n\t\t\t<Chart data={log} plotKey={show} />\n\t\t\t<Flex my=\"7\" justifyContent=\"center\">\n\t\t\t\t{Object.keys(response).map((k, i) => (\n\t\t\t\t\t<Button mx=\"2\" key={i} onClick={toggleData} name={k}>\n\t\t\t\t\t\t{k.toUpperCase()}\n\t\t\t\t\t</Button>\n\t\t\t\t))}\n\t\t\t</Flex>\n\t\t</Box>\n\t);\n};\n\nexport default Rotation;\n","export default __webpack_public_path__ + \"static/media/raspi.c0f7c7bb.webp\";","import React from 'react';\nimport {\n\tChakraProvider,\n\tFlex,\n\tBox,\n\tText,\n\tHeading,\n\tLink,\n\tVStack,\n\tCode,\n\tGrid,\n\ttheme,\n\tImage,\n\tUnorderedList,\n\tListItem\n} from '@chakra-ui/react';\nimport raspi from './raspi.webp';\nimport ReactMarkdown from 'react-markdown';\n\nexport default function Home() {\n\treturn (\n\t\t<Box>\n\t\t\t<Box m=\"10\">\n\t\t\t\t<Heading my=\"3\" size=\"md\">\n\t\t\t\t\tWhat is an IMU?\n\t\t\t\t</Heading>\n\t\t\t\t<Text my=\"1\">IMU stands for Inertial Measurement Unit. It's actually three sensors in one:</Text>\n\t\t\t\t<UnorderedList>\n\t\t\t\t\t<ListItem>A gyroscope (measures momentum and rotation)</ListItem>\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\tAn accelerometer (measures acceleration forces and can be used to find the direction of gravity)\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\tA magnetometer (measures the Earth's own magnetic field, so it's a bit like a compass)\n\t\t\t\t\t</ListItem>\n\t\t\t\t</UnorderedList>\n\t\t\t</Box>\n\t\t\t<Flex height=\"50vh\" justifyContent=\"center\">\n\t\t\t\t<Image src={raspi} />\n\t\t\t</Flex>\n\t\t\t<Box m=\"10\">\n\t\t\t\t<Heading my=\"3\" size=\"md\">\n\t\t\t\t\tHow is orientation represented?\n\t\t\t\t</Heading>\n\t\t\t\t<Text my=\"1\">The three axes are:</Text>\n\t\t\t\t<UnorderedList>\n\t\t\t\t\t<ListItem>Pitch (like a plane taking off)</ListItem>\n\t\t\t\t\t<ListItem>Roll (the plane doing a victory roll)</ListItem>\n\t\t\t\t\t<ListItem>Yaw (imagine steering the plane like a car)</ListItem>\n\t\t\t\t</UnorderedList>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n","import React from 'react';\nimport { ChakraProvider, Flex, Box, Text, Heading, Link, VStack, Code, Grid, theme, Image } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Rotation from './Rotation';\nimport Graph from './Graph';\nimport Home from './Home';\nimport { Route, Switch, NavLink } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<ChakraProvider theme={theme}>\n\t\t\t<Box>\n\t\t\t\t<Flex bg=\"teal\" alignItems=\"center\" justifyContent=\"space-between\">\n\t\t\t\t\t<Heading m=\"4\" color=\"white\" size=\"lg\" fontWeight=\"400\" letterSpacing=\".1em\">\n\t\t\t\t\t\tSense Hat Demo\n\t\t\t\t\t</Heading>\n\t\t\t\t\t<NavLink to=\"/\">\n\t\t\t\t\t\t<Text color=\"white\">Home</Text>\n\t\t\t\t\t</NavLink>\n\t\t\t\t\t<NavLink to=\"/spaceship\">\n\t\t\t\t\t\t<Text color=\"white\">Space Ship</Text>\n\t\t\t\t\t</NavLink>\n\t\t\t\t\t<NavLink to=\"/graph\">\n\t\t\t\t\t\t<Text color=\"white\">Graph</Text>\n\t\t\t\t\t</NavLink>\n\t\t\t\t\t<ColorModeSwitcher />\n\t\t\t\t</Flex>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t<Route exact path=\"/spaceship\" component={Rotation} />\n\t\t\t\t\t<Route exact path=\"/graph\" component={Graph} />\n\t\t\t\t</Switch>\n\t\t\t</Box>\n\t\t</ChakraProvider>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<ColorModeScript />\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}